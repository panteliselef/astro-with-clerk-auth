---
import Layout from "../layouts/Layout.astro";
import { getAuth } from "astro-clerk-auth/v0";
import UserButton from "../react/UserButton";
import { queryBuilder } from "../db/planetscale";

if (import.meta.env.FLAG_GUESTBOOK !== "true") {
  return Astro.redirect(`/`, 307);
}

const auth = await getAuth({ client: Astro });

if (auth instanceof Response) {
  return auth;
}

if (!auth.userId) {
  return Astro.redirect(`/sign-in?redirect_url=${Astro.request.url}`, 307);
}

async function getGuestbook() {
  const data = await queryBuilder
    .selectFrom("guestbook")
    .select(["id", "message", "created_by"])
    .orderBy("updatedAt", "desc")
    .limit(100)
    .execute();

  return data;
}

let entries;
let error = false;

try {
  entries = await getGuestbook();
} catch (e) {
  error = true;
  entries = [];
}
---

<Layout title="Protected by clerk">
  <main>
    <h1>Only visible to members</h1>
    <UserButton client:only />

    <button id="add">Add</button>

    {
      error && (
        <p class="text-neutral-600 dark:text-neutral-400 mr-1 text-center p-4">
          We failed to load entries ðŸ˜©
        </p>
      )
    }

    {
      entries.map((entry) => (
        <div class="flex flex-col space-y-1 mb-4">
          <div class="w-full text-sm break-words">
            <span class="text-neutral-600 dark:text-neutral-400 mr-1">
              {entry.created_by}:
            </span>
            {entry.message}
          </div>
        </div>
      ))
    }
  </main>
</Layout>

<script>
  document.getElementById("add")?.addEventListener("click", async () => {
    await fetch("/api/guestbook", {
      method: "POST",
      headers: {
        "Content-type": "application/json",
      },
      body: JSON.stringify({
        message: "This is a test",
      }),
    });
  });
</script>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
